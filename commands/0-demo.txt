==================== Initial Setup ====================
- sidecar apps (envoy [1]; destinationrules)
- istio ingressgateway (load balancer that handles incoming HTTP and HTTPS traffic to the mesh; gateway and virtualservice)

------------------------------------------------------------

kind create cluster --name ambient --config src/kind-config.yaml
k apply -f src/init.yaml
k9s --context kind-ambient

istio-1.20.1/bin/istioctl install --set profile=himajai2-demo -d istio-1.20.1/manifests/ -y
k patch services istio-ingressgateway -n istio-system --patch-file src/gateway-patch.yaml
kubectl label namespace pf istio-injection=enabled

kubectl apply -f istio-1.20.1/samples/bookinfo/platform/kube/bookinfo.yaml -n pf
kubectl apply -f istio-1.20.1/samples/bookinfo/networking/bookinfo-gateway.yaml -n pf
kubectl apply -f istio-1.20.1/samples/bookinfo/networking/destination-rule-all.yaml -n pf
kubectl apply -f istio-1.20.1/samples/bookinfo/networking/virtual-service-all-v1.yaml -n pf

kubectl apply -f istio-1.20.1/samples/sleep/sleep.yaml -n pf
kubectl apply -f istio-1.20.1/samples/sleep/notsleep.yaml -n pf

kubectl apply -f istio-1.20.1/samples/addons

istio-1.20.1/bin/istioctl dashboard kiali

Test:
for i in $(seq 1 30); do kubectl exec deploy/sleep -n pf -- curl -s "http://istio-ingressgateway.istio-system/productpage" | grep "reviews-"; done
-> Serve only version v1 [DR is applied]

for i in $(seq 1 30); do kubectl exec deploy/sleep -n pf -- curl -s productpage.pf:9080/productpage | grep "reviews-"; done
-> Service to service communication
------------------------------------------------------------



==================== Deploy Ambient with Ingressgateway ====================
- ztunnel [2]
- waypoint [3]
- istio cni

------------------------------------------------------------

istio-1.20.1/bin/istioctl install --set profile=himajai2-ambient -d istio-1.20.1/manifests/ -y
k patch services istio-ingressgateway -n istio-system --patch-file src/gateway-patch.yaml

for i in $(seq 1 30); do kubectl exec deploy/sleep -n pf -- curl -s "http://istio-ingressgateway.istio-system/productpage" | grep "reviews-"; done
kubectl exec deploy/sleep -n pf -- curl -s "http://istio-ingressgateway.istio-system/productpage" | grep -o "<title>.*</title>"
kubectl exec deploy/sleep -n pf -- curl -s http://productpage:9080/ | grep -o "<title>.*</title>"
kubectl exec deploy/notsleep -n pf -- curl -s http://productpage:9080/ | grep -o "<title>.*</title>"

kubectl label namespace pf istio.io/dataplane-mode=ambient istio-injection-
kubectl get namespace -L istio.io/dataplane-mode
k rollout restart deployment details-v1 notsleep productpage-v1 ratings-v1 reviews-v1 reviews-v2 reviews-v3 sleep -n pf

for i in $(seq 1 30); do kubectl exec deploy/sleep -n pf -- curl -s "http://istio-ingressgateway.istio-system/productpage" | grep "reviews-"; done
kubectl exec deploy/sleep -n pf -- curl -s "http://istio-ingressgateway.istio-system/productpage" | grep -o "<title>.*</title>"
kubectl exec deploy/sleep -n pf -- curl -s http://productpage:9080/ | grep -o "<title>.*</title>"
kubectl exec deploy/notsleep -n pf -- curl -s http://productpage:9080/ | grep -o "<title>.*</title>"
> #1 should not work because there is no waypoint

L4 Auth Policy:
k apply -f src/l4-auth.yaml

kubectl exec deploy/sleep -n pf -- curl -s "http://istio-ingressgateway.istio-system/productpage" | grep -o "<title>.*</title>"
kubectl exec deploy/sleep -n pf -- curl -s http://productpage:9080/ | grep -o "<title>.*</title>"
kubectl exec deploy/notsleep -n pf -- curl -s http://productpage:9080/ | grep -o "<title>.*</title>"

k delete -f src/l4-auth.yaml

kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \
  { kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd/experimental?ref=v1.0.0" | kubectl apply -f -; }

k apply -f src/waypoint.yaml
# add vs with fault injection test case

for i in $(seq 1 30); do kubectl exec deploy/sleep -n pf -- curl -s "http://istio-ingressgateway.istio-system/productpage" | grep "reviews-"; done

L7 Auth Policy:
k apply -f src/l7-auth.yaml

kubectl exec deploy/sleep -n pf -- curl -s "http://istio-ingressgateway.istio-system/productpage" -X DELETE
kubectl exec deploy/notsleep -n pf -- curl -s http://productpage:9080/
kubectl exec deploy/sleep -n pf -- curl -s http://productpage:9080/ | grep -o "<title>.*</title>"

k delete -f src/l7-auth.yaml

------------------------------------------------------------



===== Replace Ingressgateway with K8s Gateway API =====
- httproutes [4]

------------------------------------------------------------
istio-1.20.1/bin/istioctl install --set profile=himajai2-ambient-gateway-api -d istio-1.20.1/manifests/ -y
kubectl apply -f istio-1.20.1/samples/bookinfo/gateway-api/bookinfo-gateway.yaml -n pf
k patch services bookinfo-gateway-istio -n pf --patch-file src/gateway-api-patch.yaml

kubectl delete -f istio-1.20.1/samples/bookinfo/networking/bookinfo-gateway.yaml -n pf
kubectl delete -f istio-1.20.1/samples/bookinfo/networking/destination-rule-all.yaml -n pf
kubectl delete -f istio-1.20.1/samples/bookinfo/networking/virtual-service-all-v1.yaml -n pf

kubectl apply -f istio-1.20.1/samples/bookinfo/platform/kube/bookinfo-versions.yaml -n pf
kubectl apply -f istio-1.20.1/samples/bookinfo/gateway-api/route-all-v1.yaml -n pf

Test:
for i in $(seq 1 30); do kubectl exec deploy/sleep -n pf -- curl -s "http://bookinfo-gateway-istio.pf/productpage" | grep "reviews-"; done
for i in $(seq 1 30); do kubectl exec deploy/sleep -n pf -- curl -s "http://istio-ingressgateway.istio-system/productpage" | grep "reviews-"; done
------------------------------------------------------------



===== Destroy =====

kind delete cluster --name ambient


===== TODO =====
1) ambient pod annotation similar to sidecar
2) traffic flow in detail


===== Observations =====

1) mtls L4 Function (Service-to-Service communication)
exec sleep -> curl -s http://productpage:9080/ | grep -o "<title>.*</title>"
log ztunnel same node

2) 
k debug -it -n istio-system ztunnel-v84rn --image=nicolaka/netshoot --image-pull-policy=Always
termshark -i eth0

3) mtls
kubectl exec $(kubectl get pod -l app=sleep -n pf -o jsonpath={.items..metadata.name}) -c istio-proxy -n pf -- ls /etc/certs


================================================================================================================================

References:
[1] https://istio.io/latest/docs/ops/deployment/architecture/#envoy

[2] ztunnel - https://istio.io/latest/docs/ops/ambient/usage/ztunnel/
- ztunnel proxy uses xDS APIs to communicate with the Istio control plane (istiod)
- also obtains mTLS certificates for the Service Accounts of all pods that are scheduled on its Kubernetes node using xDS
- implements L4 data plane functionality
- HBONE tunnel is used to service-service communication across different nodes (HBONE (for HTTP Based Overlay Network Encapsulation) is used in Istio ambient to refer to a technique for transparently and securely tunneling TCP packets encapsulated within HTTPS packets)
- SPIFFE identities are used to identify the workloads on each side of the connection
- HBONE tunnel runs on TCP port 15008
- https://istio.io/latest/docs/ops/ambient/architecture/ 
- https://istio.io/latest/blog/2023/traffic-for-ambient-and-sidecar/
- https://www.alibabacloud.com/blog/depth-analysis-of-istio-ambient-mesh-traffic-path_600643

[3] waypoint - https://istio.io/latest/blog/2023/waypoint-proxy-made-simple/
- Layer 7 processing layer
- A waypoint refers to the HTTP proxy component of ambient data plane mode. 
- A waypoint runs on a per-namespace or per-service account basis and handles all traffic entering that namespace.

[4] gateway api - https://gateway-api.sigs.k8s.io/
- https://istio.io/latest/blog/2022/getting-started-gtwapi/